package com.rufeng.system.business.service.impl;


import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.rufeng.common.core.db.Pager;
import com.rufeng.common.core.utils.StringUtils;
import com.rufeng.system.business.domain.po.SysDictData;
import com.rufeng.system.business.domain.po.SysDictType;
import com.rufeng.system.business.mapper.ISysDictDataDao;
import com.rufeng.system.business.mapper.ISysDictTypeDao;
import com.rufeng.system.business.service.ISysDictTypeService;
import com.rufeng.system.core.framework.utils.DictUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;


/**
 * 字典类型 服务接口实现
 *
 * @version v1.0.0
 * @auther chengen
 * @date 2020/12/18 18:24
 */
@Service
public class SysDictTypeServiceImpl extends ServiceImpl<ISysDictTypeDao, SysDictType> implements ISysDictTypeService {
    private Logger log = LoggerFactory.getLogger(SysDictTypeServiceImpl.class);

    @Autowired
    private ISysDictTypeDao sysdicttypeDao;
    @Autowired
    private ISysDictDataDao sysDictDataDao;

    @Override
    public SysDictType get(Integer dictid) throws Exception {
        log.debug("###[服务] 开始查询字典类型 dictid=[{}]. ", dictid);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        SysDictType dictType = sysdicttypeDao.selectById(dictid);
        log.info("###[服务] 完成查询字典类型 dictType=[{}]", dictType);
        return dictType;
    }

    @Override
    public List<SysDictType> list(SysDictType dictType) throws Exception {
        log.debug("###[服务] 开始根据条件{}查询字典类型,dictType=[{}]", dictType);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        QueryWrapper<SysDictType> sysdicttypeWrapper = new QueryWrapper<>();
        sysdicttypeWrapper.setEntity(dictType);
        List<SysDictType> dictTypes = list(sysdicttypeWrapper);
        log.info("###[服务] 完成查询字典类型 dictTypes=[{}]", dictTypes);
        return dictTypes;
    }

    @Override
    public IPage<SysDictType> listPager(SysDictType dictType, Pager page) throws Exception {
        log.debug("###[服务] 开始根据条件{}分页查询字典类型,dictType=[{}],page=[{}]", dictType, page);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        Page<SysDictType> pageParam = new Page<>(page.getCurrentPage() == null ? 1 : page.getCurrentPage(),
                page.getTotalSize() == null ? 10 : page.getTotalSize()); // 当前页码，每页条数
        QueryWrapper<SysDictType> sysdicttypeWrapper = new QueryWrapper<>();
        sysdicttypeWrapper.setEntity(dictType);
        IPage<SysDictType> pu = page(pageParam, sysdicttypeWrapper);
        log.info("###[服务] 完成分页查询字典类型 pu=[{}]", pu);
        return pu;
    }

    @Override
    public boolean add(SysDictType dictType) throws Exception {
        log.debug("###[服务] 开始添加新字典类型, dictType=[{}]", dictType);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        boolean flag = save(dictType);
        log.info("###[服务] 完成添加新字典类型，flag=[{}]", flag);
        return flag;
    }

    @Override
    public boolean update(SysDictType dictType) throws Exception {
        log.debug("###[服务] 开始根据条件{}修改字典类型,dictType=[{}]", dictType);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        boolean flag = updateById(dictType);
        log.info("###[服务] 完成修改字典类型，flag=[{}]", flag);
        return flag;
    }

    @Override
    public boolean delete(Integer dictid) throws Exception {
        log.debug("###[服务] 开始根据条件{}删除字典类型,dictid=[{}]", dictid);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        boolean flag = removeById(dictid);
        log.info("###[服务] 完成删除字典类型，flag=[{}]", flag);
        return flag;
    }

    @Override
    public List<SysDictData> getByDictType(String dicttype) {
        log.debug("###[服务] 开始根据字典类型获取字典类型 dicttype=[{}]. ", dicttype);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        List<SysDictData> dictDatas = DictUtils.getDictCache(dicttype);
        if (StringUtils.isNotEmpty(dictDatas))
        {
            return dictDatas;
        }
        QueryWrapper<SysDictData> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("dicttype",dicttype).eq("status",0).
                orderBy(true,true,"dictsort");
        dictDatas = sysDictDataDao.selectList(queryWrapper);
        if (StringUtils.isNotEmpty(dictDatas))
        {
            DictUtils.setDictCache(dicttype, dictDatas);
            return dictDatas;
        }
        log.info("###[服务] 完成根据字典类型获取字典类型 dictDatas=[{}]", dictDatas);
        return null;
    }
}
